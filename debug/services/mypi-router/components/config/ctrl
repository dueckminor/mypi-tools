#!/usr/bin/env python3

import os
from time import sleep

from mypi.debug.api import API
from mypi.debug.ctrl import CtrlGo,Ctrl
from mypi.debug.config import Config


class CtrlRouterConfig(Ctrl):
    def __init__(self):
        Ctrl.__init__(self,"mypi-router",component="config")

    def create_config(self):
        api = API.from_env()

        cfg = api.download_yml('config/mypi.yml')

        domain=""

        for domain_info in cfg['config']['domains']:
            if domain_info.get('debug') == True:
                domain=domain_info.get('name')

        for filename in ['fullchain.pem','privkey.pem']:
            filename = f'etc/letsencrypt/live/{domain}/{filename}'
            content = api.download_file(filename)
            Config().write(filename=filename,content=content)

        config={}
        config['auth']={
            'client_id': 'mypi-router',
            'client_secret': '...',
            'server_key': '...'
        }
        config['certs']=[
            {
                'cert': Config().filename(f'etc/letsencrypt/live/{domain}/fullchain.pem'),
                'key': Config().filename(f'etc/letsencrypt/live/{domain}/privkey.pem'),
            }
        ]
        config['hosts']=[
            {
                'name': f'auth.{domain}',
                'target': f'localhost:{api.get_component_info("mypi-auth","go")["port"]}',
                'mode': 'http'
            },
            {
                'name': f'cam.{domain}',
                'target': f'localhost:{api.get_component_info("mypi-videostream","go")["port"]}',
                'mode': 'http'
            }
        ]

        print(config)
        Config().write(filename="etc/mypi-router/router.yml",content=config)
        
        cfg_local = {
            'config': {
                'webcams': [] #cfg['config'].get('webcams')
            }
        }
        Config().write(filename="config/mypi.yml",content=cfg_local)

    def run(self):
        while True:
            ctrl.set_state("writing configuration")
            self.create_config()
            ctrl.set_state("running")
            print("waiting for changes...")
            while True:
                sleep(5)

ctrl = CtrlRouterConfig()

if __name__ == '__main__':
    ctrl.run()

